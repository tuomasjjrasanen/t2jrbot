#!/usr/bin/env python
# -*- coding: utf-8 -*-

# t2jrbot - simple but elegant IRC bot
# Copyright © 2014 Tuomas Räsänen <tuomasjjrasanen@tjjr.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import hashlib
import re

import yaml

import t2jrbot.conf
import t2jrbot.core

def parse_args():
    parser = argparse.ArgumentParser(description="Simple but elegant IRC bot")
    parser.add_argument("config_file", metavar="CONFIG_FILE",
                        help="configuration file")
    return parser.parse_args()

def parse_conf(filepath):
    with open(filepath) as conf_file:
        conf_yaml = conf_file.read()

    try:
        conf = yaml.safe_load(conf_yaml)
    except yaml.error.MarkedYAMLError, e1:
        raise t2jrbot.ConfError("invalid syntax near line %d, column %d" %
                                (e1.problem_mark.line + 1, e1.problem_mark.column + 1))
    except yaml.error.YAMLError, e2:
        raise t2jrbot.ConfError("invalid syntax")

    return conf

RE_PLUGIN = re.compile(r"^([a-zA-Z_][a-zA-Z_0-9]*)(\.[a-zA-Z_][a-zA-Z_0-9]*)*$")

def validate_conf(conf):
    t2jrbot.conf.validate_keys(conf, ["server", "port", "nick", "plugins"])

    try:
        server = conf["server"]
    except KeyError:
        pass # Ok, optional key.
    else:
        if not isinstance(server, str):
            raise t2jrbot.ConfError("invalid 'server' key, expected string")

    try:
        port = conf["port"]
    except KeyError:
        pass # Ok, optional key.
    else:
        if not isinstance(port, int) or port <= 0 or port >= 65536:
            raise t2jrbot.ConfError("invalid 'port' key, "
                                    "expected integer from range 1-65535")

    try:
        nick = conf["nick"]
    except KeyError:
        pass # Ok, optional key.
    else:
        if not isinstance(nick, str):
            raise t2jrbot.ConfError("invalid 'nick' key, expected string")

    try:
        plugins = conf["plugins"]
    except KeyError:
        pass # Ok, optional key.
    else:
        if not isinstance(plugins, dict):
            raise t2jrbot.ConfError("invalid 'plugins' key, expected mapping")
        for plugin in plugins:
            if not isinstance(plugin, str) or not RE_PLUGIN.match(plugin):
                raise t2jrbot.ConfError("invalid plugin name '%s', "
                                        "expected alphanumeric string" % plugin)

def main():
    options = parse_args()

    conf = parse_conf(options.config_file)

    validate_conf(conf)

    server = conf.get("server", "localhost")
    port = conf.get("port", 6667)
    nick = conf.get("nick", "t2jrbot")
    plugins = conf.get("plugins", {})

    bot = t2jrbot.core.Bot(server, port, nick)

    for plugin_name, plugin_conf in plugins.items():
        bot.load_plugin(plugin_name, plugin_conf)

    bot.run()

if __name__ == "__main__":
    main()

#!/usr/bin/env python
# -*- coding: utf-8 -*-

# t2jrbot - simple but elegant IRC bot
# Copyright © 2014 Tuomas Räsänen <tuomasjjrasanen@tjjr.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import hashlib
import importlib
import os
import sys

import t2jrbot

def command_admin_list(bot, nick, host, channel, command, argstr):
    admins = ["%s!%s" % (nick, host) for nick, host in bot.admins]
    bot.send_ircmsg_privmsg(channel, "%s: %s" % (nick, " ".join(admins)))

def command_admin_add(bot, nick, host, channel, command, argstr):
    admin_nick, admin_host = parse_admin_arg(argstr)
    bot.add_admin(admin_nick, admin_host)

def command_admin_remove(bot, nick, host, channel, command, argstr):
    admin_nick, admin_host = parse_admin_arg(argstr)
    bot.remove_admin(admin_nick, admin_host)

def command_help(bot, nick, host, channel, command, argstr):
    bot.send_ircmsg_privmsg(channel, "%s: List of commands:" % nick)
    for cmd, descr in bot.command_descriptions.items():
        bot.send_ircmsg_privmsg(channel, "%s: %s - %s" % (nick, cmd, descr))

def command_quit(bot, nick, host, channel, command, argstr):
    bot.quit(argstr)

plugins = {}
plugin_dirs = set()

def load_plugin(bot, plugin_name):
    global plugins
    global plugin_dirs

    if plugin_name in plugins:
        return False

    orig_sys_path = list(sys.path)
    try:
        sys.path.extend(plugin_dirs)
        plugin = importlib.import_module(plugin_name)
        del sys.modules[plugin_name]

        for name, handler, description, require_admin in plugin.commands:
            bot.register_command(name, handler, description, require_admin)

        plugins[plugin_name] = plugin
    finally:
        sys.path = orig_sys_path

    return True

def command_say(bot, nick, host, channel, command, argstr):
    bot.send_ircmsg_privmsg(channel, argstr)
    bot.send_ircmsg_privmsg(channel, "-- %s" % nick)

def parse_admin_arg(admin):
    admin_nick, sep, admin_host = admin.partition("!")
    admin_nick = admin_nick.strip()
    admin_host = admin_host.strip()
    if not admin_nick or not sep or not admin_host:
        raise argparse.ArgumentTypeError("malformed admin identifier, should "
                                         "be of form 'nick!user@example.org'")
    return admin_nick, admin_host

def parse_args():
    parser = argparse.ArgumentParser(description="Simple but elegant IRC bot")
    parser.add_argument("-p", "--port", type=int, default=6667,
                        help="port of the server which bot connects to, default=6667")
    parser.add_argument("server", metavar="SERVER",
                        help="address of the server which bot connects to")
    parser.add_argument("channel", metavar="CHANNEL",
                        help="channel which bot joins after a connection is established")
    parser.add_argument("-n", "--nick", default=None,
                        help="nickname of the bot")
    parser.add_argument("-a", "--admin", action="append", dest="admins", default=[],
                        type=parse_admin_arg, metavar="ADMIN",
                        help="admin of the bot (e.g. 'nick!user@example.org'), "
                        "can be given multiple times to add multiple admins")
    parser.add_argument("-L", "--plugin-dir", action="append", dest="plugin_dirs",
                        default=[], metavar="PLUGIN_DIR",
                        help="add plugin directory, can be given multiple times "
                        "to add multiple directories")
    parser.add_argument("-l", "--load-plugin", action="append", dest="plugin_names",
                        default=[], metavar="PLUGIN",
                        help="load plugin, can be given multiple times to "
                        "load multiple plugins")
    return parser.parse_args()

def main():
    global plugin_dirs

    options = parse_args()

    if options.nick is None:
        md5 = hashlib.md5()
        md5.update(options.server)
        md5.update(options.channel)
        options.nick = "t2jrbot_%s" % md5.hexdigest()

    bot = t2jrbot.Bot(options.server, options.port, options.nick, options.channel)

    # Built-in commands.
    bot.register_command("!admin_list", command_admin_list, "list admins", require_admin=False)
    bot.register_command("!admin_add", command_admin_add, "add admin")
    bot.register_command("!admin_remove", command_admin_remove, "remove admin")
    bot.register_command("!help", command_help, "show help", require_admin=False)
    bot.register_command("!quit", command_quit, "quit")
    bot.register_command("!say", command_say, "say something to the channel")

    for admin_nick, admin_host in options.admins:
        bot.add_admin(admin_nick, admin_host)

    plugin_dirs.update(options.plugin_dirs)

    if len(plugin_dirs) > 0:
        for plugin_name in set(options.plugin_names):
            load_plugin(bot, plugin_name)

    bot.run()

if __name__ == "__main__":
    main()

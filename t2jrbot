#!/usr/bin/env python
# -*- coding: utf-8 -*-

# t2jrbot - simple but elegant IRC bot
# Copyright © 2014 Tuomas Räsänen <tuomasjjrasanen@tjjr.fi>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import ConfigParser
import hashlib

import t2jrbot

def command_help(bot, nick, host, channel, this_command, argstr):
    command = argstr.strip()
    if not command:
        commands = sorted(bot.command_descriptions.keys())
        bot.send_irc_privmsg(channel,
                             "%s: Commands: %s"
                             % (nick, ", ".join(commands)))
        bot.send_irc_privmsg(channel,
                             "%s: To get detailed help on a command, "
                             "use %s COMMAND, e.g. %s %s"
                             % (nick, this_command, this_command, this_command))
    else:
        try:
            descr = bot.command_descriptions[command]
        except KeyError:
            bot.send_irc_privmsg(channel,
                                 "%s: command '%s' not found" % (nick, command))
        else:
            bot.send_irc_privmsg(channel, "%s: %s - %s"
                                 % (nick, command, descr))

def command_quit(bot, nick, host, channel, this_command, argstr):
    bot.quit(argstr)

def irc_ping(bot, prefix, this_irccmd, params):
    bot.send_irc_pong(bot.nick)

def irc_error(bot, prefix, this_irccmd, params):
    sys.exit(1)

def irc_001(bot, prefix, this_irccmd, params):
    # Update the nick after successful connection because
    # the server might have truncated or otherwise modified
    # the nick we requested.
    bot.nick = params[0]
    bot.send_irc_join(bot.channel)

def irc_privmsg(bot, prefix, this_irccmd, params):
    nick, sep, host = prefix.partition("!")

    target, text = params

    if target == bot.nick:
        # User-private messages are not supported and are silently
        # ignored.
        return

    channel = target

    # Ignore all leading whitespaces.
    text = text.lstrip()

    if not text.startswith("%s:" % bot.nick):
        # The message is not designated to me, ignore.
        return

    # Strip my nick from the beginning of the text.
    commandstr = text[len("%s:" % bot.nick):].lstrip()

    command, _, argstr = commandstr.partition(' ')

    bot.eval_command(nick, host, channel, command, argstr)

def parse_args():
    parser = argparse.ArgumentParser(description="Simple but elegant IRC bot")
    parser.add_argument("config_file", metavar="CONFIG_FILE",
                        help="configuration file")
    return parser.parse_args()

def parse_conf(filepath):
    bot_conf = {}
    plugins_conf = {}

    config_parser = ConfigParser.RawConfigParser()
    config_parser.read(filepath)

    for section in config_parser.sections():
        if section == "bot":
            bot_conf.update(dict(config_parser.items(section)))
            continue

        if section.startswith("plugins."):
            plugin_name = section.lstrip("plugins.")
            plugin_conf = plugins_conf.setdefault(plugin_name, {})
            plugin_conf.update(dict(config_parser.items(section)))
            continue

    return bot_conf, plugins_conf

def main():
    options = parse_args()

    bot_conf, plugins_conf = parse_conf(options.config_file)

    server = bot_conf.get("server", "localhost")
    port = int(bot_conf.get("port", 6667))
    nick = bot_conf.get("nick", "t2jrbot")
    channel = bot_conf.get("channel", "#t2jrbot")
    plugin_dirs = bot_conf.get("plugin_dirs", "").splitlines()
    plugins = bot_conf.get("plugins", "").splitlines()

    bot = t2jrbot.Bot(server, port, nick, channel)

    # Built-in bot commands.
    bot.register_command("!help", command_help,
                         "Since you got this far, "
                         "you already know what this command does.")
    bot.register_command("!quit", command_quit, "Quits the bot, "
                         "optionally with a message. "
                         "Usage: !quit [MESSAGE], "
                         "e.g. !quit So Long, and Thanks for All the Fish!")

    bot.add_irc_callback(irc_ping, irccmd="PING")
    bot.add_irc_callback(irc_error, irccmd="ERROR")
    bot.add_irc_callback(irc_001, irccmd="001")
    bot.add_irc_callback(irc_privmsg, irccmd="PRIVMSG")

    for plugin_dir in plugin_dirs:
        bot.add_plugin_dir(plugin_dir)

    for plugin_name in plugins:
        bot.load_plugin(plugin_name, plugins_conf.get(plugin_name, {}))

    bot.run()

if __name__ == "__main__":
    main()
